/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Runninggame;

import java.awt.Graphics;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.util.Timer;
import java.util.TimerTask;
import javax.swing.JPanel;

/**
 *
 * @author rossmann
 */
public class MainFrame extends javax.swing.JFrame {

	public Figur myFigur = null;
	public Wald myWald = null;
	public Weg myWeg = null;
	public JPanel myJPanel;
	private int Weg = 0;
	private int Pos = 0;
	private int Richtung = 0;
	private int GlobalePosition = 0;
	private int AnzSpielbloecke = 500;
	private int SpielblockLänge = 200;
	private Koordinatensystem myKoordinatensystem = null;

	/**
	 * Creates new form MainFrame
	 */
	public MainFrame() {
		initComponents();

		myKoordinatensystem = new Koordinatensystem(10, 6);

		// ----------------------------------------------------------------------
		// Ein neues JPanel zum zeichnen
		// ----------------------------------------------------------------------
		myJPanel = new JPanel() {
			@Override
			public void paint(final Graphics g) {
				super.paint(g);
				ZeicheLeinwand(g);
			};
		};
		myFigur = new Figur(this, myKoordinatensystem);
		myFigur.setPosition(true, 400, 370);
		myWald = new Wald(this, AnzSpielbloecke, 50);
		myWeg = new Weg(this, AnzSpielbloecke, 350);

		// ----------------------------------------------------------------------
		// Tastatureingaben
		// ----------------------------------------------------------------------
		getContentPane().addKeyListener(new KeyListener() {
			@Override
			public void keyTyped(KeyEvent e) {
				System.out.println("1" + e.paramString());
			}

			@Override
			public void keyPressed(KeyEvent e) {
				System.out.println("2" + e.getKeyChar());
				if (e.getKeyCode() == KeyEvent.VK_UP) {
					myFigur.setPosition(true, 400, 320);
				}
				if (e.getKeyCode() == KeyEvent.VK_RIGHT) {
					myFigur.setSpeed(5);
					Richtung = 1;
					myFigur.StartAnimi("R");
				}
				if (e.getKeyCode() == KeyEvent.VK_LEFT) {
					myFigur.setSpeed(5);
					Richtung = -1;
					myFigur.StartAnimi("L");
				}
			}

			@Override
			public void keyReleased(KeyEvent e) {
				System.out.println("3" + e.getKeyChar());
			}
		});
		// ----------------------------------------------------------------------
		//
		// ----------------------------------------------------------------------
		myJPanel.setSize(getContentPane().size());
		getContentPane().add(myJPanel);
		pack();
		setVisible(true);
		getContentPane().setFocusable(true);
	}

	// ----------------------------------------------------------------------
	// Auf der Leinwand zeichnen
	// ----------------------------------------------------------------------
	private void ZeicheLeinwand(Graphics g) {
		// Zeichet eine Linie
		g.drawLine(0, 300, 1000, 300);
		// Zeichnet eine Figur
		myWald.Animi(g);
		myWeg.Animi(g);
		Pos = myFigur.Animi(g);
		if (Pos > 1) {
			GlobalPositionBerechnen();
			myWald.Step(GlobalePosition);
			myWeg.Step(GlobalePosition);
		}
	}

	// ----------------------------------------------------------------------
	// Auf der Leinwand zeichnen
	// ----------------------------------------------------------------------
	private void GlobalPositionBerechnen() {
		if (Richtung == 1) {
			if (GlobalePosition < AnzSpielbloecke * SpielblockLänge)
				GlobalePosition++;
		} else {
			if (GlobalePosition > 0)
				GlobalePosition--;
		}
	}

	public void StartTimer() {
		Timer timer = new Timer();
		timer.schedule(new TimerTask() {
			@Override
			public void run() {
				repaint();
			}
		}, 0, 10);

		Timer timer2 = new Timer();
		timer2.schedule(new TimerTask() {
			@Override
			public void run() {
				myFigur.StartAnimi("R");
			};
		}, 0, 50);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
		setSize(new java.awt.Dimension(600, 400));
		addComponentListener(new java.awt.event.ComponentAdapter() {
			public void componentResized(java.awt.event.ComponentEvent evt) {
				FormGroesseGeaendert(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 1000, Short.MAX_VALUE));
		layout.setVerticalGroup(
				layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGap(0, 400, Short.MAX_VALUE));

		pack();
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void FormGroesseGeaendert(java.awt.event.ComponentEvent evt) {// GEN-FIRST:event_FormGroesseGeaendert

		myKoordinatensystem.setGroesse(this.getHeight(), this.getWidth());

	}// GEN-LAST:event_FormGroesseGeaendert

	// ----------------------------------------------------------------------
	// Hauptfunktion
	// ----------------------------------------------------------------------
	public static void main(String args[]) {
		MainFrame myFrame = new MainFrame();
		myFrame.StartTimer();

//        Timer timer = new Timer();
//        timer.schedule(new TimerTask() {
//            @Override
//            public void run() {
//                myFrame.repaint();
//            }
//        }, 0, 10);
//
//        Timer timer2 = new Timer();
//        timer2.schedule(new TimerTask() {
//            @Override
//            public void run () {
//               myFigur.StartAnimi("R");
//            };
//        }, 0,50);
	}

	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables
}
